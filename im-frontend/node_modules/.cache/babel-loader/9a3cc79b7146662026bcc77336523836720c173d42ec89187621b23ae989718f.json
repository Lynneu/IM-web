{"ast":null,"code":"import { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'userInfo',\n  setup() {\n    const store = useStore();\n    const form = reactive({\n      username: '',\n      password: '',\n      email: ''\n    });\n    const isEditing = ref(false);\n    const backToPreviousPage = () => {\n      // TODO: 返回上一界面的逻辑\n    };\n    const startEditing = () => {\n      // 开始编辑时，克隆 Vuex 中的用户数据\n      Object.assign(form, store.state.user);\n      isEditing.value = true;\n    };\n    const submitForm = async () => {\n      // 创建一个新的对象，只包含用户修改的字段\n      const updatedFields = Object.entries(form.value).reduce((obj, [key, value]) => {\n        // 如果用户已经输入了新的值，那么添加这个字段到新的对象中\n        if (value) {\n          obj[key] = value;\n        }\n        return obj;\n      }, {});\n\n      // 确保至少有一个字段被修改\n      if (!Object.keys(updatedFields).length) {\n        ElMessage.error('请至少修改一个字段');\n        return;\n      }\n\n      // TODO: 调用后端的更新用户接口，传递formData，并处理返回的数据\n      try {\n        const response = await fetch(`http://localhost:8000/users/${store.state.user.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedFields)\n        });\n        if (!response.ok) throw new Error('Network response was not ok');\n        const result = await response.json();\n\n        // 使用返回的状态码来判断请求是否成功\n        if (response.status === 200) {\n          ElMessage.success('个人信息修改成功');\n          // 使用返回的数据来更新 Vuex 状态\n          store.commit('updateUser', result);\n        } else {\n          ElMessage.error('个人信息修改失败');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        ElMessage.error('服务器出现问题，请稍后再试');\n      } finally {\n        isEditing.value = false;\n      }\n    };\n    return {\n      backToPreviousPage,\n      form,\n      submitForm,\n      isEditing,\n      startEditing\n    };\n  }\n};","map":{"version":3,"names":["ref","useStore","ElMessage","name","setup","store","form","reactive","username","password","email","isEditing","backToPreviousPage","startEditing","Object","assign","state","user","value","submitForm","updatedFields","entries","reduce","obj","key","keys","length","error","response","fetch","id","method","headers","body","JSON","stringify","ok","Error","result","json","status","success","commit","console"],"sources":["/Users/lynneu/Documents/GitHub/IM-web/im-frontend/src/views/userInfo.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <el-button @click=\"backToPreviousPage\" class=\"back-btn\">返回</el-button>\n      <el-card class=\"box-card\" v-if=\"!isEditing\">\n        <template v-slot:header>\n          <span>个人信息</span>\n        </template>\n        <p><strong>用户名: </strong>{{ form.username }}</p>\n        <p><strong>邮箱: </strong>{{ form.email }}</p>\n        <el-button @click=\"startEditing\" type=\"primary\">修改</el-button>\n      </el-card>\n      <el-card class=\"box-card\" v-else>\n        <template v-slot:header>\n          <span>修改个人信息</span>\n        </template>\n        <el-form ref=\"form\" :model=\"form\" label-width=\"120px\">\n          <el-form-item label=\"用户名\">\n            <el-input v-model=\"form.username\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"密码\">\n            <el-input v-model=\"form.password\" type=\"password\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"邮箱\">\n            <el-input v-model=\"form.email\"></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"submitForm('form')\">提交</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n    </div>\n  </template>\n  \n  \n  <script>\n  import { ref } from 'vue';\n  import { useStore } from 'vuex';\n  import { ElMessage } from 'element-plus';\n  \n  export default {\n    name: 'userInfo',\n    setup() {\n      const store = useStore();\n      const form = reactive({\n      username: '',\n      password: '',\n      email: '',\n    });\n      const isEditing = ref(false);\n      const backToPreviousPage = () => {\n        // TODO: 返回上一界面的逻辑\n      };\n  \n      const startEditing = () => {\n        // 开始编辑时，克隆 Vuex 中的用户数据\n        Object.assign(form, store.state.user);\n        isEditing.value = true;\n      };\n  \n      const submitForm = async () => {\n                // 创建一个新的对象，只包含用户修改的字段\n        const updatedFields = Object.entries(form.value).reduce((obj, [key, value]) => {\n            // 如果用户已经输入了新的值，那么添加这个字段到新的对象中\n            if (value) {\n            obj[key] = value;\n            }\n            return obj;\n        }, {});\n\n        // 确保至少有一个字段被修改\n        if (!Object.keys(updatedFields).length) {\n            ElMessage.error('请至少修改一个字段');\n            return;\n        }\n\n        // TODO: 调用后端的更新用户接口，传递formData，并处理返回的数据\n        try {\n            const response = await fetch(`http://localhost:8000/users/${store.state.user.id}`, {\n                method: 'PUT',\n                headers: {\n                'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(updatedFields),\n            });\n            if (!response.ok) throw new Error('Network response was not ok');\n            const result = await response.json();\n            \n            // 使用返回的状态码来判断请求是否成功\n            if (response.status === 200) {\n                ElMessage.success('个人信息修改成功');\n                // 使用返回的数据来更新 Vuex 状态\n                store.commit('updateUser', result);\n            } else {\n                ElMessage.error('个人信息修改失败');\n            }\n            } catch (error) {\n            console.error('Error:', error);\n            ElMessage.error('服务器出现问题，请稍后再试');\n            } finally {\n            isEditing.value = false;\n            }\n\n      };\n  \n      return { backToPreviousPage, form, submitForm, isEditing, startEditing };\n    },\n  };\n  </script>\n\n\n<style scoped>\n.container {\n  padding: 50px;\n}\n\n.box-card {\n  margin-bottom: 20px;\n}\n\n.back-btn {\n  margin-bottom: 20px;\n}\n</style>"],"mappings":"AAmCE,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,SAAQ,QAAS,cAAc;AAExC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIJ,QAAQ,CAAC,CAAC;IACxB,MAAMK,IAAG,GAAIC,QAAQ,CAAC;MACtBC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC,CAAC;IACA,MAAMC,SAAQ,GAAIX,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMY,kBAAiB,GAAIA,CAAA,KAAM;MAC/B;IAAA,CACD;IAED,MAAMC,YAAW,GAAIA,CAAA,KAAM;MACzB;MACAC,MAAM,CAACC,MAAM,CAACT,IAAI,EAAED,KAAK,CAACW,KAAK,CAACC,IAAI,CAAC;MACrCN,SAAS,CAACO,KAAI,GAAI,IAAI;IACxB,CAAC;IAED,MAAMC,UAAS,GAAI,MAAAA,CAAA,KAAY;MACrB;MACR,MAAMC,aAAY,GAAIN,MAAM,CAACO,OAAO,CAACf,IAAI,CAACY,KAAK,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAEN,KAAK,CAAC,KAAK;QAC3E;QACA,IAAIA,KAAK,EAAE;UACXK,GAAG,CAACC,GAAG,IAAIN,KAAK;QAChB;QACA,OAAOK,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,IAAI,CAACT,MAAM,CAACW,IAAI,CAACL,aAAa,CAAC,CAACM,MAAM,EAAE;QACpCxB,SAAS,CAACyB,KAAK,CAAC,WAAW,CAAC;QAC5B;MACJ;;MAEA;MACA,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAE,+BAA8BxB,KAAK,CAACW,KAAK,CAACC,IAAI,CAACa,EAAG,EAAC,EAAE;UAC/EC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACT,cAAc,EAAE;UAChB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,aAAa;QACtC,CAAC,CAAC;QACF,IAAI,CAACQ,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChE,MAAMC,MAAK,GAAI,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;QAEpC;QACA,IAAIX,QAAQ,CAACY,MAAK,KAAM,GAAG,EAAE;UACzBtC,SAAS,CAACuC,OAAO,CAAC,UAAU,CAAC;UAC7B;UACApC,KAAK,CAACqC,MAAM,CAAC,YAAY,EAAEJ,MAAM,CAAC;QACtC,OAAO;UACHpC,SAAS,CAACyB,KAAK,CAAC,UAAU,CAAC;QAC/B;MACA,EAAE,OAAOA,KAAK,EAAE;QAChBgB,OAAO,CAAChB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BzB,SAAS,CAACyB,KAAK,CAAC,eAAe,CAAC;MAChC,UAAU;QACVhB,SAAS,CAACO,KAAI,GAAI,KAAK;MACvB;IAEN,CAAC;IAED,OAAO;MAAEN,kBAAkB;MAAEN,IAAI;MAAEa,UAAU;MAAER,SAAS;MAAEE;IAAa,CAAC;EAC1E;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}