{"ast":null,"code":"import { ref, reactive, computed, onMounted } from \"vue\";\nimport axios from 'axios';\nexport default {\n  name: 'HelloWorld',\n  setup() {\n    const friends = ref([]);\n    const fetchFriends = async () => {\n      const userId = JSON.parse(localStorage.getItem('user')).id;\n      const response = await axios.get(`http://localhost:8000/users/${userId}/friends`);\n      friends.value = response.data;\n    };\n    onMounted(fetchFriends);\n    const registerUser = reactive({\n      username: '',\n      email: '',\n      password: ''\n    });\n    const loginUser = reactive({\n      username: '',\n      password: ''\n    });\n    const friendId = ref(\"\");\n    const message = ref(\"\");\n    const receiveMessage = ref(\"\");\n    let socket = null;\n    const user = computed(() => {\n      // Get user from localStorage and parse it\n      const storedUser = localStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    });\n    const register = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:8000/users/\", {\n          username: registerUser.username,\n          email: registerUser.email,\n          password: registerUser.password\n        });\n        console.log(response.data);\n        connectSocket(response.data.id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const addFriend = async () => {\n      try {\n        if (!user.value) {\n          throw new Error('User not logged in');\n        }\n        await axios.put(`http://localhost:8000/users/${user.value.id}/friends/${friendId.value}`);\n        alert('Friend added successfully');\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const connectSocket = userId => {\n      socket = new WebSocket(\"ws://localhost:8000/ws/\" + userId);\n      socket.onopen = () => {\n        console.log(\"success!\");\n      };\n      socket.onmessage = event => {\n        console.log(\"Message from server: \", event.data);\n        receiveMessage.value += event.data;\n      };\n      socket.onclose = event => {\n        console.log(\"Socket closed\", event);\n      };\n    };\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(JSON.stringify({\n          receiver_id: friendId.value,\n          content: message.value\n        }));\n        message.value = \"\";\n      }\n    };\n    return {\n      friends,\n      registerUser,\n      loginUser,\n      friendId,\n      message,\n      receiveMessage,\n      register,\n      addFriend,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","axios","name","setup","friends","fetchFriends","userId","JSON","parse","localStorage","getItem","id","response","get","value","data","registerUser","username","email","password","loginUser","friendId","message","receiveMessage","socket","user","storedUser","register","post","console","log","connectSocket","error","addFriend","Error","put","alert","WebSocket","onopen","onmessage","event","onclose","sendMessage","readyState","OPEN","send","stringify","receiver_id","content"],"sources":["/Users/lynneu/Documents/GitHub/im-frontend/src/views/helloWorld.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Test Chat</h1>\n  \n      <!-- User Registration -->\n      <div>\n        <h2>注册</h2>\n        <input v-model=\"registerUser.username\" placeholder=\"username\" />\n        <input v-model=\"registerUser.email\" placeholder=\"email\" />\n        <input v-model=\"registerUser.password\" placeholder=\"password\" type=\"password\" />\n        <button @click=\"register\">Register</button>\n      </div>\n    \n      <!-- Add Friend -->\n      <div>\n        <h2>添加好友</h2>\n        <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n        <button @click=\"addFriend\">Add Friend</button>\n      </div>\n  \n      <!-- Send Message -->\n      <div>\n        <h2>发送消息</h2>\n        <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n        <input v-model=\"message\" placeholder=\"message\" />\n        <button @click=\"sendMessage\">Send Message</button>\n      </div>\n\n       <!-- 好友列表 -->\n       <div>\n        <h2>好友列表</h2>\n        <div>\n        <div v-if=\"friends.length\">\n          <router-link v-for=\"(friend, key) in friends\" :key=\"key\">\n            <div>\n              <div>{{ friend.username }}</div>\n            </div>\n          </router-link>\n        </div>\n        <div v-else>- 当前没有好友 -</div>\n      </div>\n      </div>\n  \n       <!-- Receive Message -->\n       <div>\n        <h2>消息列表</h2>\n        <text>{{ receiveMessage }}</text>\n      </div>\n  \n    </div>\n  </template>\n  \n  <script>\n  import { ref, reactive, computed, onMounted } from \"vue\";\n  import axios from 'axios';\n  \n  export default {\n    name: 'HelloWorld',\n    setup() {\n      const friends = ref([])\n\n      const fetchFriends = async () => {\n        const userId = JSON.parse(localStorage.getItem('user')).id\n        const response = await axios.get(`http://localhost:8000/users/${userId}/friends`)\n        friends.value = response.data\n      }\n      onMounted(fetchFriends)\n\n      const registerUser = reactive({\n        username: '',\n        email: '',\n        password: '',\n      });\n      \n      const loginUser = reactive({\n        username: '',\n        password: '',\n      });\n  \n      const friendId = ref(\"\");\n      const message = ref(\"\");\n      const receiveMessage = ref(\"\")\n      let socket = null;\n  \n      const user = computed(() => {\n        // Get user from localStorage and parse it\n        const storedUser = localStorage.getItem('user');\n        return storedUser ? JSON.parse(storedUser) : null;\n      });\n  \n      const register = async () => {\n        try {\n          const response = await axios.post(\"http://localhost:8000/users/\", {\n            username: registerUser.username,\n            email: registerUser.email,\n            password: registerUser.password,\n          });\n          console.log(response.data);\n          connectSocket(response.data.id);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n  \n      const addFriend = async () => {\n        try {\n          if (!user.value) {\n            throw new Error('User not logged in');\n          }\n          await axios.put(`http://localhost:8000/users/${user.value.id}/friends/${friendId.value}`);\n          alert('Friend added successfully');\n        } catch (error) {\n          console.error(error);\n        }\n      };\n  \n      const connectSocket = (userId) => {\n        socket = new WebSocket(\"ws://localhost:8000/ws/\" + userId);\n  \n        socket.onopen = () => {\n          console.log(\"success!\")\n        }\n        socket.onmessage = (event) => {\n          console.log(\"Message from server: \", event.data);\n          receiveMessage.value += event.data;\n        };\n        socket.onclose = (event) => {\n        console.log(\"Socket closed\", event);\n  };\n  \n      };\n  \n      const sendMessage = () => {\n        if (socket && socket.readyState === WebSocket.OPEN) {\n          socket.send(JSON.stringify({\n            receiver_id: friendId.value,\n            content: message.value\n          }));\n          message.value = \"\";\n        }\n      };\n  \n      return {\n        friends,\n        registerUser,\n        loginUser,\n        friendId,\n        message,\n        receiveMessage,\n        register,\n        addFriend,\n        sendMessage,\n      };\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}