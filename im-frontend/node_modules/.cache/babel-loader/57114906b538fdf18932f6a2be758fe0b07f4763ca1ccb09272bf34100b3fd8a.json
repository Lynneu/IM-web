{"ast":null,"code":"import { ref, reactive } from \"vue\";\nimport axios from 'axios';\nexport default {\n  setup() {\n    const registerUser = reactive({\n      username: '',\n      email: '',\n      password: ''\n    });\n    const loginUser = reactive({\n      email: '',\n      password: ''\n    });\n    const friendId = ref(\"\");\n    const message = ref(\"\");\n    const receiveMessage = ref(\"\");\n    let socket = null;\n    const register = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:8000/users/\", {\n          username: registerUser.username,\n          email: registerUser.email,\n          password: registerUser.password\n        });\n        console.log(response.data);\n        connectSocket(response.data.id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const login = async () => {\n      try {\n        // Assuming you have a login endpoint\n        const response = await axios.post(\"http://localhost:8000/login\", {\n          email: loginUser.email,\n          password: loginUser.password\n        });\n        console.log(response.data);\n        connectSocket(response.data.id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const addFriend = async () => {\n      try {\n        // Assuming logged user's id is stored in localStorage\n        const userId = localStorage.getItem(\"userId\");\n        await axios.put(`http://localhost:8000/users/${userId}/friends/${friendId.value}`);\n        alert('Friend added successfully');\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const connectSocket = userId => {\n      socket = new WebSocket(\"ws://localhost:8000/ws/\" + userId);\n      socket.onopen = () => {\n        console.log(\"success!\");\n      };\n      socket.onmessage = event => {\n        console.log(\"Message from server: \", event.data);\n        receiveMessage.value += event.data;\n      };\n      socket.onclose = event => {\n        console.log(\"Socket closed\", event);\n      };\n    };\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(JSON.stringify({\n          receiver_id: friendId.value,\n          content: message.value\n        }));\n        message.value = \"\";\n      }\n    };\n    return {\n      registerUser,\n      loginUser,\n      friendId,\n      message,\n      receiveMessage,\n      register,\n      login,\n      addFriend,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","axios","setup","registerUser","username","email","password","loginUser","friendId","message","receiveMessage","socket","register","response","post","console","log","data","connectSocket","id","error","login","addFriend","userId","localStorage","getItem","put","value","alert","WebSocket","onopen","onmessage","event","onclose","sendMessage","readyState","OPEN","send","JSON","stringify","receiver_id","content"],"sources":["/Users/lynneu/Documents/GitHub/im-frontend/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Test Chat</h1>\n\n    <!-- User Registration -->\n    <div>\n      <h2>Register</h2>\n      <input v-model=\"registerUser.username\" placeholder=\"username\" />\n      <input v-model=\"registerUser.email\" placeholder=\"email\" />\n      <input v-model=\"registerUser.password\" placeholder=\"password\" type=\"password\" />\n      <button @click=\"register\">Register</button>\n    </div>\n\n    <!-- User Login -->\n    <div>\n      <h2>Login</h2>\n      <input v-model=\"loginUser.email\" placeholder=\"email\" />\n      <input v-model=\"loginUser.password\" placeholder=\"password\" type=\"password\" />\n      <button @click=\"login\">Login</button>\n    </div>\n\n    <!-- Add Friend -->\n    <div>\n      <h2>Add Friend</h2>\n      <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n      <button @click=\"addFriend\">Add Friend</button>\n    </div>\n\n    <!-- Send Message -->\n    <div>\n      <h2>Send Message</h2>\n      <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n      <input v-model=\"message\" placeholder=\"message\" />\n      <button @click=\"sendMessage\">Send Message</button>\n    </div>\n\n     <!-- Receive Message -->\n     <div>\n      <h2>Receive Message</h2>\n      <text>{{ receiveMessage }}</text>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { ref, reactive } from \"vue\";\nimport axios from 'axios';\n\nexport default {\n  setup() {\n    const registerUser = reactive({\n      username: '',\n      email: '',\n      password: '',\n    });\n    \n    const loginUser = reactive({\n      email: '',\n      password: '',\n    });\n\n    const friendId = ref(\"\");\n    const message = ref(\"\");\n    const receiveMessage = ref(\"\")\n    let socket = null;\n\n    const register = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:8000/users/\", {\n          username: registerUser.username,\n          email: registerUser.email,\n          password: registerUser.password,\n        });\n        console.log(response.data);\n        connectSocket(response.data.id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const login = async () => {\n      try {\n        // Assuming you have a login endpoint\n        const response = await axios.post(\"http://localhost:8000/login\", {\n          email: loginUser.email,\n          password: loginUser.password,\n        });\n        console.log(response.data);\n        connectSocket(response.data.id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const addFriend = async () => {\n      try {\n        // Assuming logged user's id is stored in localStorage\n        const userId = localStorage.getItem(\"userId\");\n        await axios.put(`http://localhost:8000/users/${userId}/friends/${friendId.value}`);\n        alert('Friend added successfully');\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const connectSocket = (userId) => {\n      socket = new WebSocket(\"ws://localhost:8000/ws/\" + userId);\n\n      socket.onopen = () => {\n        console.log(\"success!\")\n      }\n      socket.onmessage = (event) => {\n        console.log(\"Message from server: \", event.data);\n        receiveMessage.value += event.data;\n      };\n      socket.onclose = (event) => {\n      console.log(\"Socket closed\", event);\n};\n\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(JSON.stringify({\n          receiver_id: friendId.value,\n          content: message.value\n        }));\n        message.value = \"\";\n      }\n    };\n\n    return {\n      registerUser,\n      loginUser,\n      friendId,\n      message,\n      receiveMessage,\n      register,\n      login,\n      addFriend,\n      sendMessage,\n    };\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}