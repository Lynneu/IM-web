{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive, computed, onMounted, inject } from \"vue\";\nimport axios from 'axios';\nexport default {\n  name: 'HelloWorld',\n  setup() {\n    const friends = ref([]);\n    const socket = inject('socket');\n    const fetchFriends = async () => {\n      const userId = JSON.parse(this.$store.state.user).id;\n      console.log(userId);\n      const response = await axios.get(`http://localhost:8000/users/${userId}/friends`);\n      friends.value = response.data;\n    };\n    onMounted(async () => {\n      await fetchFriends();\n\n      // Set up WebSocket listeners\n      if (socket.instance) {\n        socket.instance.onmessage = event => {\n          console.log(\"Message from server: \", event.data);\n          const message = JSON.parse(event.data);\n          switch (message.type) {\n            case 'status':\n              {\n                // 更新好友的在线状态\n                const friend = friends.value.find(friend => friend.id === message.content.user_id);\n                if (friend) {\n                  friend.online = message.content.status === 'online';\n                }\n                break;\n              }\n            case 'text':\n              // Handle received messages as before\n              receiveMessage.value.push(event.data);\n              break;\n            default:\n              console.log(\"Unknown message type:\", message.type);\n          }\n        };\n        socket.instance.onclose = event => {\n          console.log(\"Socket closed\", event);\n        };\n      }\n    });\n    const registerUser = reactive({\n      username: '',\n      email: '',\n      password: ''\n    });\n    const friendId = ref(\"\");\n    const message = ref(\"\");\n    const receiveMessage = ref([]);\n    const user = computed(() => {\n      // Get user from localStorage and parse it\n      const storedUser = localStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    });\n    const register = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:8000/users/\", {\n          username: registerUser.username,\n          email: registerUser.email,\n          password: registerUser.password\n        });\n        console.log(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const addFriend = async () => {\n      try {\n        if (!user.value) {\n          throw new Error('User not logged in');\n        }\n        await axios.put(`http://localhost:8000/users/${user.value.id}/friends/${friendId.value}`);\n        alert('Friend added successfully');\n        await fetchFriends();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const sendMessage = () => {\n      if (message.value.trim() !== '' && socket.instance && socket.instance.readyState === WebSocket.OPEN) {\n        console.log(message.value);\n        socket.instance.send(JSON.stringify({\n          receiver_id: friendId.value,\n          content: message.value\n        }));\n        message.value = \"\";\n      }\n    };\n    return {\n      friends,\n      registerUser,\n      friendId,\n      message,\n      receiveMessage,\n      register,\n      addFriend,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","inject","axios","name","setup","friends","socket","fetchFriends","userId","JSON","parse","$store","state","user","id","console","log","response","get","value","data","instance","onmessage","event","message","type","friend","find","content","user_id","online","status","receiveMessage","push","onclose","registerUser","username","email","password","friendId","storedUser","localStorage","getItem","register","post","error","addFriend","Error","put","alert","sendMessage","trim","readyState","WebSocket","OPEN","send","stringify","receiver_id"],"sources":["/Users/lynneu/Documents/GitHub/im-frontend/src/views/helloWorld.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Test Chat</h1>\n    \n      <!-- Add Friend -->\n      <div class=\"section\">\n        <h2>添加好友</h2>\n        <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n        <button @click=\"addFriend\">Add Friend</button>\n      </div>\n  \n      <!-- Send Message -->\n      <div class=\"section\">\n        <h2>Send Message</h2>\n        <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n        <input v-model=\"message\" placeholder=\"message\" />\n        <button @click=\"sendMessage\">Send Message</button>\n      </div>\n  \n       <!-- Friends List -->\n       <div class=\"section\">\n        <h2>好友列表</h2>\n        <div v-if=\"friends.length\">\n          <div v-for=\"(friend, key) in friends\" :key=\"key\" class=\"friend-item\">\n            <router-link :to=\"`/privatechat/${friend.id}`\">\n            <div>\n              {{ friend.username }}\n              <span v-if=\"friend.online == true\" class=\"status-online\">[Online]</span>\n              <span v-if=\"friend.online == false\" class=\"status-offline\">[Offline]</span>\n            </div>\n        </router-link>\n          </div>\n        </div>\n        <div v-else>- No Friends -</div>\n      </div>\n  \n       <!-- Receive Message -->\n       <div class=\"section\">\n        <h2>Message List</h2>\n        <div v-if=\"receiveMessage.length\">\n          <div v-for=\"(msg, key) in receiveMessage\" :key=\"key\" class=\"message-item\">\n            {{ msg }}\n          </div>\n        </div>\n        <div v-else>- No Messages -</div>\n      </div>\n    </div>\n</template>\n\n  \n  <script>\n  import { ref, reactive, computed, onMounted, inject } from \"vue\";\n  import axios from 'axios';\n  \n  export default {\n    name: 'HelloWorld',\n    setup() {\n      const friends = ref([]);\n      const socket = inject('socket');\n      const fetchFriends = async () => {\n        const userId = JSON.parse(this.$store.state.user).id\n        console.log(userId)\n        const response = await axios.get(`http://localhost:8000/users/${userId}/friends`)\n        friends.value = response.data\n      }\n      onMounted(async () => {\n  await fetchFriends();\n\n  // Set up WebSocket listeners\n  if (socket.instance) {\n    socket.instance.onmessage = (event) => {\n      console.log(\"Message from server: \", event.data);\n      const message = JSON.parse(event.data);\n\n      switch (message.type) {\n        case 'status': {\n          // 更新好友的在线状态\n          const friend = friends.value.find(friend => friend.id === message.content.user_id);\n          if (friend) {\n            friend.online = message.content.status === 'online';\n          }\n          break;\n        }\n        case 'text':\n          // Handle received messages as before\n          receiveMessage.value.push(event.data)\n          break;\n        default:\n          console.log(\"Unknown message type:\", message.type);\n      }\n    };\n\n    socket.instance.onclose = (event) => {\n      console.log(\"Socket closed\", event);\n    };\n  }\n});\n\n      const registerUser = reactive({\n        username: '',\n        email: '',\n        password: '',\n      });      \n  \n      const friendId = ref(\"\");\n      const message = ref(\"\");\n      const receiveMessage = ref([])\n  \n      const user = computed(() => {\n        // Get user from localStorage and parse it\n        const storedUser = localStorage.getItem('user');\n        return storedUser ? JSON.parse(storedUser) : null;\n      });\n  \n      const register = async () => {\n        try {\n          const response = await axios.post(\"http://localhost:8000/users/\", {\n            username: registerUser.username,\n            email: registerUser.email,\n            password: registerUser.password,\n          });\n          console.log(response.data);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n  \n      const addFriend = async () => {\n        try {\n          if (!user.value) {\n            throw new Error('User not logged in');\n          }\n          await axios.put(`http://localhost:8000/users/${user.value.id}/friends/${friendId.value}`);\n          alert('Friend added successfully');\n          await fetchFriends(); \n        } catch (error) {\n          console.error(error);\n        }\n      };\n  \n  \n      const sendMessage = () => {\n        if (message.value.trim() !== '' && socket.instance && socket.instance.readyState === WebSocket.OPEN) {\n            console.log(message.value);\n            socket.instance.send(JSON.stringify({\n            receiver_id: friendId.value,\n            content: message.value\n            }));\n            message.value = \"\";\n        }\n};\n  \n      return {\n        friends,\n        registerUser,\n        friendId,\n        message,\n        receiveMessage,\n        register,\n        addFriend,\n        sendMessage,\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n.section {\n  margin-bottom: 2rem;\n}\n\n.friend-item, .message-item {\n  border: 1px solid #ccc;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n\n.status-online {\n  color: green;\n}\n\n.status-offline {\n  color: red;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}