{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount, inject } from 'vue';\nimport axios from 'axios';\nexport default {\n  name: 'UserConversations',\n  setup() {\n    const socket = inject('socket');\n    const currentUser = ref({});\n    const conversations = ref([]);\n    const rightClickMenu = ref({\n      conversation: null,\n      visible: false,\n      x: null,\n      y: null\n    });\n    const fetchConversations = async () => {\n      currentUser.value = JSON.parse(localStorage.getItem('user'));\n      const userId = currentUser.value.id;\n      console.log(userId);\n      console.log(localStorage.getItem('user'));\n      const response = await axios.get(`http://localhost:8000/conversations/${userId}`);\n      conversations.value = response.data;\n    };\n    onMounted(async () => {\n      document.addEventListener('click', () => {\n        rightClickMenu.value.visible = false;\n      });\n      await fetchConversations();\n      socket.value.onmessage = event => {\n        let msg = event.data;\n        console.log('Received: ' + msg);\n        // Update the conversations array with the new message\n        // This depends on the structure of your message\n        let data = JSON.parse(msg);\n        conversations.value = data.conversations;\n      };\n      socket.value.onclose = event => {\n        console.log('WebSocket connection closed: ', event);\n      };\n    });\n    onBeforeUnmount(() => {\n      if (socket.value) {\n        socket.value.close();\n      }\n    });\n    const showRightClickMenu = (e, conversation) => {\n      rightClickMenu.value.conversation = conversation;\n      rightClickMenu.value.visible = true;\n      rightClickMenu.value.x = e.pageX;\n      rightClickMenu.value.y = e.pageY;\n    };\n    return {\n      currentUser,\n      conversations,\n      rightClickMenu,\n      showRightClickMenu\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","inject","axios","name","setup","socket","currentUser","conversations","rightClickMenu","conversation","visible","x","y","fetchConversations","value","JSON","parse","localStorage","getItem","userId","id","console","log","response","get","data","document","addEventListener","onmessage","event","msg","onclose","close","showRightClickMenu","e","pageX","pageY"],"sources":["/Users/lynneu/Documents/GitHub/im-frontend/src/views/conversations.vue"],"sourcesContent":["<template>\n    <div class=\"conversations\">\n      <div class=\"conversation-list\">\n        <div class=\"conversation-list-container\">\n          <div class=\"conversation-list-content\">\n            <div v-if=\"conversations.length\">\n              <router-link\n                v-for=\"(conversation, key) in conversations\" :key=\"key\"\n              >\n              <template v-slot:default>\n                <div class=\"conversation\" @contextmenu.prevent.stop=\"e => showRightClickMenu(e,conversation)\">\n                  <div class=\"avatar\">\n                    <img :src=\"conversation.data.avatar\"/>\n                    <div v-if=\"conversation.unread>0\"\n                         class=\"unread-count\">\n                      <span class=\"unread\">{{ conversation.unread }}</span>\n                    </div>\n                  </div>\n                  <div class=\"conversation-message\">\n                    <div class=\"conversation-top\">\n                      <span class=\"conversation-name\">{{ conversation.data.name }}</span>\n                      <div class=\"conversation-time\">\n                        <div>{{ formatDate(conversation.lastMessage.timestamp) }}</div>\n                      </div>\n                    </div>\n                    <div class=\"conversation-bottom\">\n                      <div class=\"conversation-content\">\n                        <div class=\"unread-text\"\n                             v-if=\"conversation.lastMessage.read === false && conversation.lastMessage.senderId === currentUser.id\">\n                          [未读]\n                        </div>\n                        <div v-if=\"conversation.type === 'private'\">\n                          {{ conversation.lastMessage.senderId === currentUser.id ? '我' : conversation.data.name }}:\n                        </div>\n                        <div v-else>\n                          {{ conversation.lastMessage.senderId === currentUser.id ? '我' : conversation.lastMessage.senderData.name }}:\n                        </div>\n                        <span class=\"text\" v-if=\"conversation.lastMessage.type === 'text'\">{{conversation.lastMessage.payload.text}}</span>\n                        <span v-else-if=\"conversation.lastMessage.type === 'video'\">[视频消息]</span>\n                        <span v-else-if=\"conversation.lastMessage.type === 'audio'\">[语音消息]</span>\n                        <span v-else-if=\"conversation.lastMessage.type === 'image'\">[图片消息]</span>\n                        <span v-else-if=\"conversation.lastMessage.type === 'file'\">[文件消息]</span>\n                        <span v-else-if=\"conversation.lastMessage.type === 'order'\">[订单消息]</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n            </template>\n              </router-link>\n            </div>\n            <div v-else class=\"no-conversation\">- 当前没有会话 -</div>\n          </div>\n        </div>\n        <div v-if=\"rightClickMenu.visible\" :style=\"{'left': rightClickMenu.x + 'px', 'top': rightClickMenu.y + 'px'}\"\n             class=\"action-box\">\n          <div class=\"action-item\" @click=\"topConversation\">{{ rightClickMenu.conversation.top ? '取消置顶' : '置顶' }}</div>\n          <div class=\"action-item\" @click=\"deleteConversation\">删除聊天</div>\n        </div>\n      </div>\n      <div class=\"chat\">\n        <router-view :key=\"$route.params.id\"/>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted, onBeforeUnmount, inject } from 'vue'\n  import axios from 'axios'\n  \n  export default {\n    name: 'UserConversations',\n    setup() {\n      const socket = inject('socket')\n      const currentUser = ref({})\n      const conversations = ref([])\n      const rightClickMenu = ref({\n        conversation: null,\n        visible: false,\n        x: null,\n        y: null,\n      })\n  \n      const fetchConversations = async () => {\n        currentUser.value = JSON.parse(localStorage.getItem('user'));\n        const userId = currentUser.value.id;\n        console.log(userId)\n        console.log(localStorage.getItem('user'))\n        const response = await axios.get(`http://localhost:8000/conversations/${userId}`)\n        conversations.value = response.data\n      }\n  \n      onMounted(async () => {\n        document.addEventListener('click', () => {\n          rightClickMenu.value.visible = false\n        })\n  \n        await fetchConversations()\n  \n        socket.value.onmessage = (event) => {\n          let msg = event.data\n          console.log('Received: ' + msg)\n          // Update the conversations array with the new message\n          // This depends on the structure of your message\n          let data = JSON.parse(msg)\n          conversations.value = data.conversations\n        }\n  \n        socket.value.onclose = (event) => {\n          console.log('WebSocket connection closed: ', event)\n        }\n      })\n  \n      onBeforeUnmount(() => {\n        if (socket.value) {\n          socket.value.close()\n        }\n      })\n  \n      const showRightClickMenu = (e, conversation) => {\n        rightClickMenu.value.conversation = conversation\n        rightClickMenu.value.visible = true\n        rightClickMenu.value.x = e.pageX\n        rightClickMenu.value.y = e.pageY\n      }\n  \n      return {\n        currentUser,\n        conversations,\n        rightClickMenu,\n        showRightClickMenu,\n      }\n    },\n  }\n  </script>\n  \n  <style scoped>\n  .conversations {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    display: flex;\n    color: #333333;\n  }\n\n  .conversation-list {\n    width: 220px;\n  }\n\n  .conversation-list-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    border-right: #dbd6d6 1px solid;\n  }\n\n  .conversation-list-content {\n    flex: 1;\n    overflow-y: auto;\n    padding: 10px 0;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n\n  .conversation-list-content::-webkit-scrollbar {\n    display: none;\n  }\n\n  .no-conversation {\n    text-align: center;\n    color: #666666;\n  }\n\n  .conversation {\n    display: flex;\n    padding: 10px 5px;\n    cursor: pointer;\n  }\n\n  .unread-count {\n    position: absolute;\n    top: -10px;\n    left: 30px;\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    color: white;\n    background: #d02129;\n  }\n\n  .unread-count .unread {\n    display: block;\n    font-size: 12px;\n    text-align: center;\n    line-height: 18px;\n  }\n\n  .conversation-message {\n    flex: 1;\n    padding-left: 5px;\n    display: flex;\n    width: 160px;\n    flex-direction: column;\n    justify-content: space-around;\n  }\n\n  .conversation-top {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    text-align: right;\n  }\n\n  .conversation-name {\n    font-size: 12px;\n    font-weight: 500;\n  }\n\n  .conversation-time {\n    width: 75px;\n    color: #B9B9B9;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .conversation-bottom {\n    display: flex;\n    color: #666666;\n  }\n\n  .conversation-content {\n    display: flex;\n    width: 160px;\n    color: #b3b3b3;\n  }\n\n  .conversation-content .text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1;\n    white-space: nowrap;\n    word-break: break-all;\n  }\n\n  .conversation-bottom .unread-text {\n    color: #d02129;\n    width: 35px !important;\n  }\n\n  .conversation .avatar {\n    width: 40px;\n    height: 40px;\n    position: relative;\n  }\n\n  .conversation .avatar img {\n    width: 100%;\n    border-radius: 10%;\n  }\n\n  .router-link-active {\n    background: #eeeeee;\n  }\n\n  .action-box {\n    width: 100px;\n    height: 60px;\n    background: #ffffff;\n    border: 1px solid #cccccc;\n    position: fixed;\n    z-index: 100;\n    border-radius: 5px;\n  }\n\n  .action-box .action-item {\n    padding-left: 15px;\n    line-height: 30px;\n    font-size: 13px;\n    color: #262628;\n    cursor: pointer;\n  }\n\n  .action-box .action-item:hover {\n    background: #dddddd;\n  }\n\n  .chat {\n    flex: 1;\n    display: flex;\n  }\n\n</style>"],"mappings":"AAkEE,SAASA,GAAG,EAAEC,SAAS,EAAEC,eAAe,EAAEC,MAAK,QAAS,KAAI;AAC5D,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIJ,MAAM,CAAC,QAAQ;IAC9B,MAAMK,WAAU,GAAIR,GAAG,CAAC,CAAC,CAAC;IAC1B,MAAMS,aAAY,GAAIT,GAAG,CAAC,EAAE;IAC5B,MAAMU,cAAa,GAAIV,GAAG,CAAC;MACzBW,YAAY,EAAE,IAAI;MAClBC,OAAO,EAAE,KAAK;MACdC,CAAC,EAAE,IAAI;MACPC,CAAC,EAAE;IACL,CAAC;IAED,MAAMC,kBAAiB,GAAI,MAAAA,CAAA,KAAY;MACrCP,WAAW,CAACQ,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MAC5D,MAAMC,MAAK,GAAIb,WAAW,CAACQ,KAAK,CAACM,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACH,MAAM;MAClBE,OAAO,CAACC,GAAG,CAACL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACxC,MAAMK,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAE,uCAAsCL,MAAO,EAAC;MAChFZ,aAAa,CAACO,KAAI,GAAIS,QAAQ,CAACE,IAAG;IACpC;IAEA1B,SAAS,CAAC,YAAY;MACpB2B,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;QACvCnB,cAAc,CAACM,KAAK,CAACJ,OAAM,GAAI,KAAI;MACrC,CAAC;MAED,MAAMG,kBAAkB,CAAC;MAEzBR,MAAM,CAACS,KAAK,CAACc,SAAQ,GAAKC,KAAK,IAAK;QAClC,IAAIC,GAAE,GAAID,KAAK,CAACJ,IAAG;QACnBJ,OAAO,CAACC,GAAG,CAAC,YAAW,GAAIQ,GAAG;QAC9B;QACA;QACA,IAAIL,IAAG,GAAIV,IAAI,CAACC,KAAK,CAACc,GAAG;QACzBvB,aAAa,CAACO,KAAI,GAAIW,IAAI,CAAClB,aAAY;MACzC;MAEAF,MAAM,CAACS,KAAK,CAACiB,OAAM,GAAKF,KAAK,IAAK;QAChCR,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEO,KAAK;MACpD;IACF,CAAC;IAED7B,eAAe,CAAC,MAAM;MACpB,IAAIK,MAAM,CAACS,KAAK,EAAE;QAChBT,MAAM,CAACS,KAAK,CAACkB,KAAK,CAAC;MACrB;IACF,CAAC;IAED,MAAMC,kBAAiB,GAAIA,CAACC,CAAC,EAAEzB,YAAY,KAAK;MAC9CD,cAAc,CAACM,KAAK,CAACL,YAAW,GAAIA,YAAW;MAC/CD,cAAc,CAACM,KAAK,CAACJ,OAAM,GAAI,IAAG;MAClCF,cAAc,CAACM,KAAK,CAACH,CAAA,GAAIuB,CAAC,CAACC,KAAI;MAC/B3B,cAAc,CAACM,KAAK,CAACF,CAAA,GAAIsB,CAAC,CAACE,KAAI;IACjC;IAEA,OAAO;MACL9B,WAAW;MACXC,aAAa;MACbC,cAAc;MACdyB;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}