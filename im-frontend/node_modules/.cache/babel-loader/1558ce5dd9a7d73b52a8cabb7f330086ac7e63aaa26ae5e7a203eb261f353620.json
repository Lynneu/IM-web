{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Test Chat\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"注册\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"添加好友\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"发送消息\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"好友列表\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  class: \"friend-list\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  class: \"friend\"\n};\nconst _hoisted_9 = {\n  class: \"friend-name\"\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"no-friends\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"消息列表\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createCommentVNode(\" User Registration \"), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.registerUser.username = $event),\n    placeholder: \"username\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.registerUser.username]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.registerUser.email = $event),\n    placeholder: \"email\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.registerUser.email]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.registerUser.password = $event),\n    placeholder: \"password\",\n    type: \"password\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.registerUser.password]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.register && $setup.register(...args))\n  }, \"Register\")]), _createCommentVNode(\" Add Friend \"), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.friendId = $event),\n    placeholder: \"friend's ID\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.friendId]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.addFriend && $setup.addFriend(...args))\n  }, \"Add Friend\")]), _createCommentVNode(\" Send Message \"), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $setup.friendId = $event),\n    placeholder: \"friend's ID\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.friendId]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $setup.message = $event),\n    placeholder: \"message\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.message]]), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \"Send Message\")]), _createCommentVNode(\" 好友列表 \"), _createElementVNode(\"div\", null, [_hoisted_5, _createElementVNode(\"div\", _hoisted_6, [$setup.friends.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.friends, (friend, key) => {\n    return _openBlock(), _createBlock(_component_router_link, {\n      key: key\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, _toDisplayString(friend.username), 1 /* TEXT */)])]),\n\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \"- 当前没有好友 -\"))])]), _createCommentVNode(\" Receive Message \"), _createElementVNode(\"div\", null, [_hoisted_11, _createElementVNode(\"text\", null, _toDisplayString($setup.receiveMessage), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","$setup","registerUser","username","$event","placeholder","email","password","type","onClick","_cache","args","register","_hoisted_3","friendId","addFriend","_hoisted_4","message","sendMessage","_hoisted_5","_hoisted_6","friends","length","_hoisted_7","_Fragment","_renderList","friend","key","_createBlock","_component_router_link","_hoisted_8","_hoisted_9","_toDisplayString","_hoisted_10","_hoisted_11","receiveMessage"],"sources":["/Users/lynneu/Documents/GitHub/im-frontend/src/views/helloWorld.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Test Chat</h1>\n  \n      <!-- User Registration -->\n      <div>\n        <h2>注册</h2>\n        <input v-model=\"registerUser.username\" placeholder=\"username\" />\n        <input v-model=\"registerUser.email\" placeholder=\"email\" />\n        <input v-model=\"registerUser.password\" placeholder=\"password\" type=\"password\" />\n        <button @click=\"register\">Register</button>\n      </div>\n    \n      <!-- Add Friend -->\n      <div>\n        <h2>添加好友</h2>\n        <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n        <button @click=\"addFriend\">Add Friend</button>\n      </div>\n  \n      <!-- Send Message -->\n      <div>\n        <h2>发送消息</h2>\n        <input v-model=\"friendId\" placeholder=\"friend's ID\" />\n        <input v-model=\"message\" placeholder=\"message\" />\n        <button @click=\"sendMessage\">Send Message</button>\n      </div>\n\n       <!-- 好友列表 -->\n       <div>\n        <h2>好友列表</h2>\n        <div class=\"friend-list\">\n        <div v-if=\"friends.length\">\n          <router-link v-for=\"(friend, key) in friends\" :key=\"key\">\n            <div class=\"friend\">\n              <div class=\"friend-name\">{{ friend.username }}</div>\n            </div>\n          </router-link>\n        </div>\n        <div v-else class=\"no-friends\">- 当前没有好友 -</div>\n      </div>\n      </div>\n  \n       <!-- Receive Message -->\n       <div>\n        <h2>消息列表</h2>\n        <text>{{ receiveMessage }}</text>\n      </div>\n  \n    </div>\n  </template>\n  \n  <script>\n  import { ref, reactive, computed, onMounted } from \"vue\";\n  import axios from 'axios';\n  \n  export default {\n    name: 'HelloWorld',\n    setup() {\n      const friends = ref([])\n\n      const fetchFriends = async () => {\n        const userId = JSON.parse(localStorage.getItem('user')).id\n        const response = await axios.get(`http://localhost:8000/users/${userId}/friends`)\n        friends.value = response.data\n      }\n      onMounted(fetchFriends)\n\n      const registerUser = reactive({\n        username: '',\n        email: '',\n        password: '',\n      });\n      \n      const loginUser = reactive({\n        username: '',\n        password: '',\n      });\n  \n      const friendId = ref(\"\");\n      const message = ref(\"\");\n      const receiveMessage = ref(\"\")\n      let socket = null;\n  \n      const user = computed(() => {\n        // Get user from localStorage and parse it\n        const storedUser = localStorage.getItem('user');\n        return storedUser ? JSON.parse(storedUser) : null;\n      });\n  \n      const register = async () => {\n        try {\n          const response = await axios.post(\"http://localhost:8000/users/\", {\n            username: registerUser.username,\n            email: registerUser.email,\n            password: registerUser.password,\n          });\n          console.log(response.data);\n          connectSocket(response.data.id);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n  \n      const addFriend = async () => {\n        try {\n          if (!user.value) {\n            throw new Error('User not logged in');\n          }\n          await axios.put(`http://localhost:8000/users/${user.value.id}/friends/${friendId.value}`);\n          alert('Friend added successfully');\n        } catch (error) {\n          console.error(error);\n        }\n      };\n  \n      const connectSocket = (userId) => {\n        socket = new WebSocket(\"ws://localhost:8000/ws/\" + userId);\n  \n        socket.onopen = () => {\n          console.log(\"success!\")\n        }\n        socket.onmessage = (event) => {\n          console.log(\"Message from server: \", event.data);\n          receiveMessage.value += event.data;\n        };\n        socket.onclose = (event) => {\n        console.log(\"Socket closed\", event);\n  };\n  \n      };\n  \n      const sendMessage = () => {\n        if (socket && socket.readyState === WebSocket.OPEN) {\n          socket.send(JSON.stringify({\n            receiver_id: friendId.value,\n            content: message.value\n          }));\n          message.value = \"\";\n        }\n      };\n  \n      return {\n        friends,\n        registerUser,\n        loginUser,\n        friendId,\n        message,\n        receiveMessage,\n        register,\n        addFriend,\n        sendMessage,\n      };\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}