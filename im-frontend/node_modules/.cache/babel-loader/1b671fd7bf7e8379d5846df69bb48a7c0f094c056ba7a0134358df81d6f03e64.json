{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"个人信息修改\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    onClick: $setup.backToPreviousPage\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"返回\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _hoisted_1, !$setup.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"用户名: \" + _toDisplayString($setup.form.username), 1 /* TEXT */), _createElementVNode(\"p\", null, \"邮箱: \" + _toDisplayString($setup.form.email), 1 /* TEXT */), _createVNode(_component_el_button, {\n    onClick: $setup.startEditing\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"修改\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])])) : (_openBlock(), _createBlock(_component_el_form, {\n    key: 1,\n    ref: \"form\",\n    model: $setup.form,\n    \"label-width\": \"120px\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_form_item, {\n      label: \"用户名\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: $setup.form.username,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.form.username = $event)\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, {\n      label: \"密码\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: $setup.form.password,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.form.password = $event),\n        type: \"password\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, {\n      label: \"邮箱\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: $setup.form.email,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.form.email = $event)\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, null, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[3] || (_cache[3] = $event => $setup.submitForm('form'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"提交\")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model\"]))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createVNode","_component_el_button","onClick","$setup","backToPreviousPage","_hoisted_1","isEditing","_hoisted_2","_toDisplayString","form","username","email","startEditing","_createBlock","_component_el_form","ref","model","_component_el_form_item","label","_component_el_input","$event","password","type","_cache","submitForm"],"sources":["/Users/lynneu/Documents/GitHub/IM-web/im-frontend/src/views/userInfo.vue"],"sourcesContent":["<template>\n    <div>\n      <el-button @click=\"backToPreviousPage\">返回</el-button>\n      <h2>个人信息修改</h2>\n      <div v-if=\"!isEditing\">\n        <p>用户名: {{ form.username }}</p>\n        <p>邮箱: {{ form.email }}</p>\n        <el-button @click=\"startEditing\">修改</el-button>\n      </div>\n      <el-form v-else ref=\"form\" :model=\"form\" label-width=\"120px\">\n        <el-form-item label=\"用户名\">\n          <el-input v-model=\"form.username\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\">\n          <el-input v-model=\"form.password\" type=\"password\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"邮箱\">\n          <el-input v-model=\"form.email\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitForm('form')\">提交</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </template>\n  \n  <script>\n  import { ref } from 'vue';\n  import { useStore } from 'vuex';\n  import { ElMessage } from 'element-plus';\n  \n  export default {\n    name: 'userInfo',\n    setup() {\n      const store = useStore();\n      const form = ref({\n        username: store.state.user.username,\n        password: '',\n        email: store.state.user.email,\n      });\n      const isEditing = ref(false);\n      const backToPreviousPage = () => {\n        // TODO: 返回上一界面的逻辑\n      };\n  \n      const startEditing = () => {\n        isEditing.value = true;\n      };\n  \n      const submitForm = async () => {\n        const formData = form.value;\n        // TODO: 调用后端的更新用户接口，传递formData，并处理返回的数据\n        try {\n          const response = await fetch(`/users/${store.state.user.id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          });\n          if (!response.ok) throw new Error('Network response was not ok');\n          const result = await response.json();\n  \n          if (result.username === formData.username && result.email === formData.email) {\n            ElMessage.success('个人信息修改成功');\n            // TODO: 更新Vuex中的用户状态\n            store.commit('updateUser', result);\n          } else {\n            ElMessage.error('个人信息修改失败');\n          }\n        } catch (error) {\n          console.error('Error:', error);\n          ElMessage.error('服务器出现问题，请稍后再试');\n        } finally {\n          isEditing.value = false;\n        }\n      };\n  \n      return { backToPreviousPage, form, submitForm, isEditing, startEditing };\n    },\n  };\n  </script>\n  "],"mappings":";gCAGMA,mBAAA,CAAe,YAAX,QAAM;;;;;;;;;uBAFZC,mBAAA,CAsBM,cArBJC,YAAA,CAAqDC,oBAAA;IAAzCC,OAAK,EAAEC,MAAA,CAAAC;EAAkB;sBAAE,MAAE,C,iBAAF,IAAE,E;;kCACzCC,UAAe,E,CACHF,MAAA,CAAAG,SAAS,I,cAArBP,mBAAA,CAIM,OAAAQ,UAAA,GAHJT,mBAAA,CAA+B,WAA5B,OAAK,GAAAU,gBAAA,CAAGL,MAAA,CAAAM,IAAI,CAACC,QAAQ,kBACxBZ,mBAAA,CAA2B,WAAxB,MAAI,GAAAU,gBAAA,CAAGL,MAAA,CAAAM,IAAI,CAACE,KAAK,kBACpBX,YAAA,CAA+CC,oBAAA;IAAnCC,OAAK,EAAEC,MAAA,CAAAS;EAAY;sBAAE,MAAE,C,iBAAF,IAAE,E;;qDAErCC,YAAA,CAaUC,kBAAA;;IAbMC,GAAG,EAAC,MAAM;IAAEC,KAAK,EAAEb,MAAA,CAAAM,IAAI;IAAE,aAAW,EAAC;;sBACnD,MAEe,CAFfT,YAAA,CAEeiB,uBAAA;MAFDC,KAAK,EAAC;IAAK;wBACvB,MAA6C,CAA7ClB,YAAA,CAA6CmB,mBAAA;oBAA1BhB,MAAA,CAAAM,IAAI,CAACC,QAAQ;mEAAbP,MAAA,CAAAM,IAAI,CAACC,QAAQ,GAAAU,MAAA;;;QAElCpB,YAAA,CAEeiB,uBAAA;MAFDC,KAAK,EAAC;IAAI;wBACtB,MAA6D,CAA7DlB,YAAA,CAA6DmB,mBAAA;oBAA1ChB,MAAA,CAAAM,IAAI,CAACY,QAAQ;mEAAblB,MAAA,CAAAM,IAAI,CAACY,QAAQ,GAAAD,MAAA;QAAEE,IAAI,EAAC;;;QAEzCtB,YAAA,CAEeiB,uBAAA;MAFDC,KAAK,EAAC;IAAI;wBACtB,MAA0C,CAA1ClB,YAAA,CAA0CmB,mBAAA;oBAAvBhB,MAAA,CAAAM,IAAI,CAACE,KAAK;mEAAVR,MAAA,CAAAM,IAAI,CAACE,KAAK,GAAAS,MAAA;;;QAE/BpB,YAAA,CAEeiB,uBAAA;wBADb,MAAoE,CAApEjB,YAAA,CAAoEC,oBAAA;QAAzDqB,IAAI,EAAC,SAAS;QAAEpB,OAAK,EAAAqB,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAEjB,MAAA,CAAAqB,UAAU;;0BAAU,MAAE,C,iBAAF,IAAE,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}