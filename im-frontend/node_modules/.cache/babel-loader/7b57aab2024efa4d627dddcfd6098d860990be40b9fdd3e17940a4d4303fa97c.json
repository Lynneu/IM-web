{"ast":null,"code":"import { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'userInfo',\n  setup() {\n    const router = useRouter();\n    const store = useStore();\n    const username = ref(store.state.user.username);\n    const password = ref('');\n    const email = ref(store.state.user.email);\n    const editingUsername = ref(store.state.user.username);\n    const editingEmail = ref(store.state.user.email);\n    const isEditing = ref(false);\n    const backToPreviousPage = () => {\n      // TODO: 返回上一界面的逻辑\n      router.back(); // 返回前一页\n    };\n\n    const startEditing = () => {\n      editingUsername.value = username.value;\n      editingEmail.value = email.value;\n      isEditing.value = true;\n    };\n    const submitForm = async () => {\n      const form = {\n        username: editingUsername.value,\n        password: password.value,\n        email: editingEmail.value\n      };\n      // 创建一个新的对象，只包含用户修改的字段\n      const updatedFields = Object.entries(form).reduce((obj, [key, value]) => {\n        // 如果用户已经输入了新的值，那么添加这个字段到新的对象中\n        if (value) {\n          obj[key] = value;\n        }\n        return obj;\n      }, {});\n\n      // 确保至少有一个字段被修改\n      if (!Object.keys(updatedFields).length) {\n        ElMessage.error('请至少修改一个字段');\n        return;\n      }\n\n      // TODO: 调用后端的更新用户接口，传递formData，并处理返回的数据\n      try {\n        const response = await fetch(`http://localhost:8000/users/${store.state.user.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedFields)\n        });\n        console.log(updatedFields);\n        if (!response.ok) throw new Error('Network response was not ok');\n        const result = await response.json();\n\n        // 使用返回的状态码来判断请求是否成功\n        if (response.status === 200) {\n          ElMessage.success('个人信息修改成功');\n          // 使用返回的数据来更新 Vuex 状态\n          store.commit('updateUser', result);\n          console.log(JSON.stringify(result, null, 2));\n          console.log(store.state.user.username);\n          console.log(store.state.user.email);\n          console.log(store.state.user.password);\n          username.value = editingUsername.value;\n          email.value = editingEmail.value;\n        } else {\n          ElMessage.error('个人信息修改失败');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        ElMessage.error('用户名或邮箱不唯一!');\n      } finally {\n        isEditing.value = false;\n      }\n    };\n    return {\n      backToPreviousPage,\n      username,\n      password,\n      email,\n      editingUsername,\n      editingEmail,\n      submitForm,\n      isEditing,\n      startEditing\n    };\n  }\n};","map":{"version":3,"names":["ref","useStore","useRouter","ElMessage","name","setup","router","store","username","state","user","password","email","editingUsername","editingEmail","isEditing","backToPreviousPage","back","startEditing","value","submitForm","form","updatedFields","Object","entries","reduce","obj","key","keys","length","error","response","fetch","id","method","headers","body","JSON","stringify","console","log","ok","Error","result","json","status","success","commit"],"sources":["/Users/lynneu/Documents/GitHub/IM-web/im-frontend/src/views/userInfo.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <el-button @click=\"backToPreviousPage\" class=\"back-btn\">返回</el-button>\n      <el-card class=\"box-card\" v-if=\"!isEditing\">\n        <template v-slot:header>\n          <span>个人信息</span>\n        </template>\n        <p><strong>用户名: </strong>{{ username }}</p>\n        <p><strong>邮箱: </strong>{{ email }}</p>\n        <el-button @click=\"startEditing\" type=\"primary\">修改</el-button>\n      </el-card>\n      <el-card class=\"box-card\" v-if=\"isEditing\">\n        <template v-slot:header>\n          <span>修改个人信息</span>\n        </template>\n        <el-form ref=\"form\" label-width=\"120px\">\n            <el-form-item label=\"用户名\">\n          <el-input v-model=\"editingUsername\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\">\n          <el-input v-model=\"password\" type=\"password\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"邮箱\">\n          <el-input v-model=\"editingEmail\"></el-input>\n        </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"submitForm\">提交</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n    </div>\n  </template>\n  \n  <script>\n  import { ref } from 'vue';\n  import { useStore } from 'vuex';\n  import { useRouter } from 'vue-router'\n  import { ElMessage } from 'element-plus';\n  \n  export default {\n    name: 'userInfo',\n    setup() {\n      const router = useRouter()\n      const store = useStore();\n      const username = ref(store.state.user.username);\n      const password = ref('');\n      const email = ref(store.state.user.email);\n      const editingUsername = ref(store.state.user.username);\n      const editingEmail = ref(store.state.user.email);\n      const isEditing = ref(false);\n  \n      const backToPreviousPage = () => {\n        // TODO: 返回上一界面的逻辑\n        router.back();  // 返回前一页\n\n      };\n  \n      const startEditing = () => {\n        editingUsername.value = username.value;\n        editingEmail.value = email.value;\n        isEditing.value = true;\n      };\n  \n      const submitForm = async () => {\n        const form = { username: editingUsername.value, password: password.value, email: editingEmail.value };\n        // 创建一个新的对象，只包含用户修改的字段\n        const updatedFields = Object.entries(form).reduce((obj, [key, value]) => {\n          // 如果用户已经输入了新的值，那么添加这个字段到新的对象中\n          if (value) {\n            obj[key] = value;\n          }\n          return obj;\n        }, {});\n  \n        // 确保至少有一个字段被修改\n        if (!Object.keys(updatedFields).length) {\n          ElMessage.error('请至少修改一个字段');\n          return;\n        }\n  \n        // TODO: 调用后端的更新用户接口，传递formData，并处理返回的数据\n        try {\n          const response = await fetch(`http://localhost:8000/users/${store.state.user.id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(updatedFields),\n          });\n          console.log(updatedFields)\n          if (!response.ok) throw new Error('Network response was not ok');\n          const result = await response.json();\n  \n          // 使用返回的状态码来判断请求是否成功\n          if (response.status === 200) {\n            ElMessage.success('个人信息修改成功');\n            // 使用返回的数据来更新 Vuex 状态\n            store.commit('updateUser', result);\n            console.log(JSON.stringify(result, null, 2))\n            console.log(store.state.user.username)\n            console.log(store.state.user.email)\n            console.log(store.state.user.password)\n            username.value = editingUsername.value;\n            email.value = editingEmail.value;\n          } else {\n            ElMessage.error('个人信息修改失败');\n          }\n        } catch (error) {\n          console.error('Error:', error);\n          ElMessage.error('用户名或邮箱不唯一!');\n        } finally {\n          isEditing.value = false;\n        }\n      };\n  \n      return { backToPreviousPage, username, password, email, editingUsername, editingEmail, submitForm, isEditing, startEditing };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .container {\n    padding: 50px;\n  }\n  \n  .box-card {\n    margin-bottom: 20px;\n  }\n  \n  .back-btn {\n    margin-bottom: 20px;\n  }\n  </style>\n  "],"mappings":"AAkCE,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,SAAQ,QAAS,YAAW;AACrC,SAASC,SAAQ,QAAS,cAAc;AAExC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIJ,SAAS,CAAC;IACzB,MAAMK,KAAI,GAAIN,QAAQ,CAAC,CAAC;IACxB,MAAMO,QAAO,GAAIR,GAAG,CAACO,KAAK,CAACE,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;IAC/C,MAAMG,QAAO,GAAIX,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMY,KAAI,GAAIZ,GAAG,CAACO,KAAK,CAACE,KAAK,CAACC,IAAI,CAACE,KAAK,CAAC;IACzC,MAAMC,eAAc,GAAIb,GAAG,CAACO,KAAK,CAACE,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;IACtD,MAAMM,YAAW,GAAId,GAAG,CAACO,KAAK,CAACE,KAAK,CAACC,IAAI,CAACE,KAAK,CAAC;IAChD,MAAMG,SAAQ,GAAIf,GAAG,CAAC,KAAK,CAAC;IAE5B,MAAMgB,kBAAiB,GAAIA,CAAA,KAAM;MAC/B;MACAV,MAAM,CAACW,IAAI,CAAC,CAAC,EAAG;IAElB,CAAC;;IAED,MAAMC,YAAW,GAAIA,CAAA,KAAM;MACzBL,eAAe,CAACM,KAAI,GAAIX,QAAQ,CAACW,KAAK;MACtCL,YAAY,CAACK,KAAI,GAAIP,KAAK,CAACO,KAAK;MAChCJ,SAAS,CAACI,KAAI,GAAI,IAAI;IACxB,CAAC;IAED,MAAMC,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,MAAMC,IAAG,GAAI;QAAEb,QAAQ,EAAEK,eAAe,CAACM,KAAK;QAAER,QAAQ,EAAEA,QAAQ,CAACQ,KAAK;QAAEP,KAAK,EAAEE,YAAY,CAACK;MAAM,CAAC;MACrG;MACA,MAAMG,aAAY,GAAIC,MAAM,CAACC,OAAO,CAACH,IAAI,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAER,KAAK,CAAC,KAAK;QACvE;QACA,IAAIA,KAAK,EAAE;UACTO,GAAG,CAACC,GAAG,IAAIR,KAAK;QAClB;QACA,OAAOO,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,IAAI,CAACH,MAAM,CAACK,IAAI,CAACN,aAAa,CAAC,CAACO,MAAM,EAAE;QACtC1B,SAAS,CAAC2B,KAAK,CAAC,WAAW,CAAC;QAC5B;MACF;;MAEA;MACA,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAE,+BAA8BzB,KAAK,CAACE,KAAK,CAACC,IAAI,CAACuB,EAAG,EAAC,EAAE;UACjFC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,aAAa;QACpC,CAAC,CAAC;QACFiB,OAAO,CAACC,GAAG,CAAClB,aAAa;QACzB,IAAI,CAACS,QAAQ,CAACU,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChE,MAAMC,MAAK,GAAI,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;;QAEpC;QACA,IAAIb,QAAQ,CAACc,MAAK,KAAM,GAAG,EAAE;UAC3B1C,SAAS,CAAC2C,OAAO,CAAC,UAAU,CAAC;UAC7B;UACAvC,KAAK,CAACwC,MAAM,CAAC,YAAY,EAAEJ,MAAM,CAAC;UAClCJ,OAAO,CAACC,GAAG,CAACH,IAAI,CAACC,SAAS,CAACK,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;UAC3CJ,OAAO,CAACC,GAAG,CAACjC,KAAK,CAACE,KAAK,CAACC,IAAI,CAACF,QAAQ;UACrC+B,OAAO,CAACC,GAAG,CAACjC,KAAK,CAACE,KAAK,CAACC,IAAI,CAACE,KAAK;UAClC2B,OAAO,CAACC,GAAG,CAACjC,KAAK,CAACE,KAAK,CAACC,IAAI,CAACC,QAAQ;UACrCH,QAAQ,CAACW,KAAI,GAAIN,eAAe,CAACM,KAAK;UACtCP,KAAK,CAACO,KAAI,GAAIL,YAAY,CAACK,KAAK;QAClC,OAAO;UACLhB,SAAS,CAAC2B,KAAK,CAAC,UAAU,CAAC;QAC7B;MACF,EAAE,OAAOA,KAAK,EAAE;QACdS,OAAO,CAACT,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B3B,SAAS,CAAC2B,KAAK,CAAC,YAAY,CAAC;MAC/B,UAAU;QACRf,SAAS,CAACI,KAAI,GAAI,KAAK;MACzB;IACF,CAAC;IAED,OAAO;MAAEH,kBAAkB;MAAER,QAAQ;MAAEG,QAAQ;MAAEC,KAAK;MAAEC,eAAe;MAAEC,YAAY;MAAEM,UAAU;MAAEL,SAAS;MAAEG;IAAa,CAAC;EAC9H;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}